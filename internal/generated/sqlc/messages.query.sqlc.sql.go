// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: messages.query.sqlc.sql

package sqlc

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
  remote_addr, content, author_name, author_email
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, remote_addr, content, author_name, author_email, created_at
`

type CreateMessageParams struct {
	RemoteAddr  string `json:"remoteAddr"`
	Content     string `json:"content"`
	AuthorName  string `json:"authorName"`
	AuthorEmail string `json:"authorEmail"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (*Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.RemoteAddr,
		arg.Content,
		arg.AuthorName,
		arg.AuthorEmail,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RemoteAddr,
		&i.Content,
		&i.AuthorName,
		&i.AuthorEmail,
		&i.CreatedAt,
	)
	return &i, err
}

const getLastMessageFromRemoteAddr = `-- name: GetLastMessageFromRemoteAddr :one
SELECT id, remote_addr, content, author_name, author_email, created_at FROM messages
WHERE remote_addr = $1
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetLastMessageFromRemoteAddr(ctx context.Context, remoteAddr string) (*Message, error) {
	row := q.db.QueryRowContext(ctx, getLastMessageFromRemoteAddr, remoteAddr)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RemoteAddr,
		&i.Content,
		&i.AuthorName,
		&i.AuthorEmail,
		&i.CreatedAt,
	)
	return &i, err
}

const listMessages = `-- name: ListMessages :many
SELECT id, remote_addr, content, author_name, author_email, created_at FROM messages
LIMIT $2 OFFSET $1
`

type ListMessagesParams struct {
	PageOffset int32 `json:"pageOffset"`
	PageSize   int32 `json:"pageSize"`
}

func (q *Queries) ListMessages(ctx context.Context, arg ListMessagesParams) ([]*Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages, arg.PageOffset, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RemoteAddr,
			&i.Content,
			&i.AuthorName,
			&i.AuthorEmail,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
